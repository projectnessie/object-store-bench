/*
 * Copyright (C) 2022 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  antlr
  `java-library`
  id("nessie-common-base")
  id("nessie-common-src")
  id("nessie-java")
  id("nessie-testing")
  alias(libs.plugins.quarkus)
}

dependencies {
  implementation(libs.picocli)
  annotationProcessor(libs.picocli.codegen)
  implementation(libs.guava)

  compileOnly(libs.jakarta.validation.api)
  compileOnly(libs.jakarta.annotation.api)

  implementation(platform(libs.awssdk.bom))
  implementation("software.amazon.awssdk:s3")
  implementation("software.amazon.awssdk:url-connection-client")
  implementation("software.amazon.awssdk:apache-client")
  implementation("software.amazon.awssdk:netty-nio-client")
  runtimeOnly(libs.slf4j.jcl.over.slf4j)

  implementation(platform(libs.google.cloud.storage.bom))
  implementation("com.google.cloud:google-cloud-storage")

  implementation(platform(libs.azuresdk.bom))
  implementation("com.azure:azure-storage-file-datalake")
  implementation("com.azure:azure-identity")

  implementation(enforcedPlatform(libs.quarkus.bom))
  implementation("io.quarkus:quarkus-picocli")
  implementation("io.quarkus:quarkus-vertx")
  implementation("io.quarkus:quarkus-vertx-http")
  implementation("io.quarkus:quarkus-micrometer")

  implementation(libs.slf4j.api)
  runtimeOnly(libs.logback.classic)

  compileOnly(libs.immutables.builder)
  compileOnly(libs.immutables.value.annotations)
  annotationProcessor(libs.immutables.value.processor)

  antlr(libs.antlr.antlr4)
  implementation(project(":object-store-bench-antlr-runtime", "shadow"))

  testFixturesApi(enforcedPlatform(libs.quarkus.bom))
  testFixturesApi("io.quarkus:quarkus-junit5")

  testFixturesApi(platform(libs.junit.bom))
  testFixturesApi(libs.bundles.junit.testing)

  testFixturesApi(libs.vertx.core)

  testFixturesApi(project(":s3mock"))

  testFixturesApi(libs.jakarta.validation.api)
  testFixturesApi(libs.jakarta.annotation.api)

  testFixturesApi(libs.google.cloud.nio)

  testFixturesCompileOnly(libs.picocli)

  intTestImplementation(project(":s3minio"))
  intTestRuntimeOnly(libs.logback.classic)
  intTestImplementation(platform(libs.testcontainers.bom))
  intTestImplementation("org.testcontainers:testcontainers")
  intTestImplementation(project(":azurite-testcontainer"))
}

sourceSets { main { antlr { setSrcDirs(listOf(project.projectDir.resolve("src/main/antlr4"))) } } }

tasks.withType<ProcessResources>().configureEach {
  from("src/main/resources") {
    expand("nessieVersion" to version)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
  }
}

val packageType = quarkusPackageType()

quarkus {
  quarkusBuildProperties.put("quarkus.package.type", packageType)
  // Pull manifest attributes from the "main" `jar` task to get the
  // release-information into the jars generated by Quarkus.
  quarkusBuildProperties.putAll(
    provider {
      tasks
        .named("jar", Jar::class.java)
        .get()
        .manifest
        .attributes
        .map { e -> "quarkus.package.manifest.attributes.\"${e.key}\"" to e.value.toString() }
        .toMap()
    }
  )
}

listOf("javadoc", "sourcesJar").forEach { name ->
  tasks.named(name).configure { dependsOn(tasks.named("compileQuarkusGeneratedSourcesJava")) }
}

listOf("checkstyleTest", "compileTestJava").forEach { name ->
  tasks.named(name).configure { dependsOn(tasks.named("compileQuarkusTestGeneratedSourcesJava")) }
}

// Gradle's implementation of the antlr plugin creates a configuration called "antlr" and lets
// the "api" configuration extend "antlr", which leaks the antlr tool and runtime plus dependencies
// to all users of this project. So do not let "api" extend from "antlr".
configurations.api.get().setExtendsFrom(listOf())

tasks.named<AntlrTask>("generateGrammarSource").configure {
  arguments.add("-visitor")
  doLast(
    ReplaceInFiles(
      fileTree(project.layout.buildDirectory.dir("generated-src/antlr/main")).matching {
        include("**/*.java")
      },
      mapOf(
        "org.antlr.v4.runtime." to "org.projectnessie.shaded.org.antlr.v4.runtime.",
        "// PACKAGE_PLACEHOLDER" to "package org.projectnessie.tools.objectstorebench.syntax;"
      )
    )
  )
}

tasks.withType<Checkstyle>().configureEach {
  exclude("org/projectnessie/tools/objectstorebench/syntax/*")
}

tasks.named<Test>("intTest").configure {
  // needed for the MinioExtension, which spins up an AWSSDK client to create the S3 bucket
  systemProperty("aws.region", "us-east-1")
}

// Testcontainers is not supported on Windows :(
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
  tasks.named<Test>("intTest").configure { this.enabled = false }
}

// Issue w/ testcontainers/podman in GH workflows :(
if (Os.isFamily(Os.FAMILY_MAC) && System.getenv("CI") != null) {
  tasks.named<Test>("intTest").configure { this.enabled = false }
}

tasks.withType<JavaCompile>().configureEach { options.release.set(21) }

tasks.named("quarkusDependenciesBuild") { dependsOn("processJandexIndex") }
